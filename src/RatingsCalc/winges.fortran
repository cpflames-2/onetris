.
.
.
c
c  Step 1 -- Set initial rating for unrateds
c
c  This first routine looks for players who are entered as "new" but
c  actually have a rating in some other system, typically a USCF rating.
c  Such players are entered with a "code" that involves a hyphen in the
c  fifth character of the ID.  For example a new player would notmally be
c  entered with an ID such as ADUN or perhaps ADUN0 or event ADUN   0.  
c  But if the player actually has an established USCF rating of say 1525,
c  the player can be entered with the ID ADUN-1525, and it's the hyphen
c  that tips the program off that this is a pre-rated player and the 1525
c  gets entered in the array prerate indexed byt the player's number in the
c  event (these numbers will be from 1 to nplayer, where nplayer is the number
c  of players in the event).
c
      do i=1,nplayer
      if(prerate(i).gt.0.) then
         rate0(i)=prerate(i)
         num0(i)=50
         numprt(i)=0
         ievalwin(i)=0
         goto 100
      endif
c
c  This next routine sets the initial rating, rate0(i), where i is the index
c  for the player between 1 and nplayer.  ievid(i) is the last 4 digits of the
c  ID entered for the player in this event.  If it's zero that means it's a new 
c  player.  If the program can match it with one of the IDs in the master
c  database then it uses the master database data for that player.  The master
c  database is seen here in a number of different arrays and indexed here with
c  the variable j which ranges from 1 to numrec, where numrec is the number of
c  players in the master database.  Arrays like rate, numgms, urate, iallwin, etc 
c  are all read in earlier from the current master database file, such as
c  rate22-14a.dat or whatever the current database file is.
c
      IF(ievid(i).eq.0) then
         indexdb(i)=0
         ig=grade(evgrd(i))
         rate0(i)=ig*100.
         num0(i)=0
         numprt(i)=0
            ievalwin(i)=0
         IF(rate0(i).lt.400.) rate0(i)=400.
      else
         do j=1,numrec
         IF(id(j).eq.ievid(i)) then
            indexdb(i)=j
            rate0(i)=rate(j)
            num0(i)=numgms(j)
            IF(num0(i).lt.50.and.urate(j).gt.0.
     &                     .and.numgmsu(j).eq.'E    ') then
               num0(i)=50
            endif
            numprt(i)=numgms(j)
               ievalwin(i)=iallwin(j)
            GOTO 100
         endif
         end do
c
c  the subroutine num2alpha is explained as follows: 
c  The unique part of the ID for each player is the last 4 digits of the full ID.
c  The 4 digits are alpha numeric, a change made to allow the number of unique
c  IDs to expand from the original 9000, to over 100,000 whils still keeping the
c  unique ID to only 4 characters.  But it turns out in the program, it's much
c  to deal with IDs as numbers rather than alpha numerics, so two subroutines were
c  added to the program, num2alpha and alpha2num that allow the transformation
c  and forth.  Here I wanted to print a message out to the user that a certain
c  player could not be found, but if I printed ievid(i) it would be the numeric
c  ID and it would be difficult for me to find the player in the input file to
c  fix it.
c
         call num2alpha(idout,ievid(i))
         WRITE(*,*) 'Currently rating section ',finame2
         WRITE(*,*) 'Can not find rating for player with id ',idout
         return
      endif
100   continue
      end do
c
c  Step 2 - set the effective number of games, nprime
c
      do i=1,nplayer
         call effgms(rate0(i),num0(i),primen(i))
      end do
c
c  Step 3 - calculate first rating estimate for unrateds
c
c  This routine is one loop for each player in the event.  A small local array 
c  ropp(k) is created which has the player number i's opponent numbers.  So, for
c  example if this was a 3-round event, and player 3 in the standings list played
c  player 2 in round 1, player 4 in round 2 and player 1 in round 3, then the
c  ropp array would be 2, 4, 1.  A subtle point to note is that ropp(k) is used
c  here rather than the big array ievoppr(i,j) which is read from the tournament
c  file, because ievoppr(i,j) includes byes, forfeits and other unplayed games,
c  but we only want to rate played games here, which have results of W, L or D.
c  Note that in this routine, if a player unrated, 
c  then an intial rating is calculated with the special ratings formula (sprt) and
c  in this case only, the variable N' (primen(i) in the program) is hard-set to 1.0
c
      do i=1,nplayer
      if(prerate(i).gt.0.) then
         rate1(i)=rate0(i)
         goto 101
      endif   
      IF(ievid(i).eq.0) then
       k=0
       do j=1,nrnds
         IF(wld(i,j).eq."W".or.wld(i,j).eq."L".or.wld(i,j).eq."D") then
           k=k+1
           ropp(k)=rate0(ievoppr(i,j))
         endif
       end do
       call sprt(rate0(i),ievalwin(i),1.0,nr(i),score(i),ropp,rate1(i))
      else
       rate1(i)=rate0(i)
      endif
101   IF(rate1(i).lt.100.) rate1(i)=100.
      end do
c
c  Step 4 - calculate an intermediate rating
c
c  Like Step 3 this step is on loop over the variable i which is the
c  player number in the standings list from the tournament file, and
c  ranges from 1 to nplayer.  However, this step does calculations for
c  all players in the event, not just the unrated players.  So if 
c  the player is unrated, or if the player has a rating, but all
c  his/her previous games were either all wins or all loses, or if
c  he/she has less than 8 games in the system, then the special rating
c  routine (sprt) is used, other wise the standard rating formula is
c  used.  
c
      do i=1,nplayer
       k=0
       do j=1,nrnds
         IF(wld(i,j).eq."W".or.wld(i,j).eq."L".or.wld(i,j).eq."D") then
            k=k+1
            ropp(k)=rate1(ievoppr(i,j))
         endif
       end do
      IF(ievid(i).eq.0.and.prerate(i).eq.0.) then
      call sprt(rate0(i),ievalwin(i),primen(i),nr(i),score(i),ropp,
     &           rate2(i))
      ELSEIF(ievalwin(i).ne.0.or.num0(i).le.8) then
      call sprt(rate0(i),ievalwin(i),primen(i),nr(i),score(i),ropp,
     &           rate2(i))
      ELSE
      call stanrate(rate0(i),primen(i),nr(i),score(i),ropp,rate2(i))
      endif
      IF(rate2(i).lt.100.) rate2(i)=100.
      end do
c
c  Step 5 - calculate the final ratings
c
      do i=1,nplayer
       k=0
       do j=1,nrnds
         IF(wld(i,j).eq."W".or.wld(i,j).eq."L".or.wld(i,j).eq."D") then
            k=k+1
            ropp(k)=rate2(ievoppr(i,j))
         endif
       end do
       ngmstot=ngmstot+k
      IF(ievid(i).eq.0.and.prerate(i).eq.0.) then
      call sprt(rate0(i),ievalwin(i),primen(i),nr(i),score(i),ropp,
     &           rate3(i))
      ELSEIF(ievalwin(i).ne.0.or.num0(i).le.8) then
      call sprt(rate0(i),ievalwin(i),primen(i),nr(i),score(i),ropp,
     &           rate3(i))
      ELSE
      call stanrate(rate0(i),primen(i),nr(i),score(i),ropp,rate3(i))
      endif
      IF(rate3(i).lt.400.) rate3(i)=400.
      num0(i)=num0(i)+nr(i)
      numprt(i)=numprt(i)+nr(i)
      trnds=nrnds*1.0
cc  10 point bump for perfect score
      IF(nrnds.ge.5) then
        IF(score(i).eq.trnds) rate3(i)=rate3(i)+10.
      endif
      end do
c  Added 12-21-2016.  The following limits the initial rating estimates
c  for sections that are entirely composed of unrateds
      numrated=0
      do i=1,nplayer
      	 if(num0(i).gt.nr(i)) numrated=numrated+1
      enddo
      if(numrated.eq.0) then
      	do i=1,nplayer
      	   if(rate3(i).gt.1000.) rate3(i)=1000.
      	enddo
      endif
.
.
.
      subroutine effgms(r,n,p)
************************************************************************
*  Subroutine effgms  (effective number of games)                      *
*  Part of Ratings program                                             *
*                                                                      *
*  This subroutine finds the effective number of games for the player. *
*  r is the player's current rating                                    *
*  n is the actual number of games the player has in the NWSRS         *
*  p is N' from the USCF algorithm, the effective number of games.     *
*                                                                      *
************************************************************************
      IF(n.eq.0) then
        p=0.
        return
      endif
      IF(r.gt.2350.) then
        star=50.
      else
        star=50./(0.662+0.00000739*(2569-r)**2)**0.5
      endif
      p=n*1.0
      IF(p.gt.star) p=star
      return
      end subroutine

      subroutine stanrate(r0,pn,m,s,ropp,r1)
************************************************************************
*  Subroutine stanrate  (standard rating formula)                      *
*  Part of Ratings program                                             *
*                                                                      *
*  This subroutine calcuates the rating using the standard rating      *
*  formula.                                                            *
*     r0 = start rating for a player in the event                      *
*     pn = N' from the USCF rating algorithm (effective # games)       *
*     m  = number of rounds player completed in the event              *
*     s  = player's score in the event                                 *
*     ropp = array of opponent ratings                                 *
*     r1 = result of standard ratings calculation                      *
*     Bfac = Professor Glickman's bonus constant.  May 1, 2017 = 14    *
*                                                                      *
************************************************************************
      DIMENSION ropp(12)
      Bfac=14
      IF(m.eq.0) then
         r1=r0
         return
      endif
      IF(m.lt.4) then
         mp=4
      else
         mp=m
      endif
      IF(r0.gt.2200.) then
         IF(r0.gt.2500.) then
            AK=200/(pn+m)
         else
            AK=800*(6.5-0.0025*r0)/(pn+m)
         endif
      else
         AK=800/(pn+m)
      endif
      e=0
      do i=1,m
         e = e + 1.0/(1.0+10**(-((r0-ropp(i))/400.)))
      end do
      IF(m.lt.3) then
         r1=r0 + AK*(s-e)
      else
         arg=0
         t1=AK*(s-e) - Bfac*(mp)**0.5
         IF(t1.gt.arg) arg=t1
         r1=r0 + AK*(s-e) + arg
      endif
      return
      end

      subroutine sprt(r0,ia,pn,m,s,ropp,r1)
************************************************************************
*  Subroutine sprt   (special rating formula - brute force version)    *
*  Part of Ratings program                                             *
*                                                                      *
*  This subroutine calcuates the rating using the special rating       *
*  formula only for step 3, calculating the first rating estimate for  *
*  unrated players.                                                    *
*    r0 = initial rating for the player                                *
*    ia = code for all wins or losses                                  *
*    pn = N' effective number games (1.0 for first time)               *
*    m  = number of rounds played                                      *
*    s  = player's score in the event                                  *
*    ropp = array of ratings of opponents                              *
*    r1 = calculated rating from special ratings formula               *
*                                                                      *
************************************************************************
      DIMENSION ropp(12),z(22),aknot(40)
      IF(m.eq.0) then
         r1=r0
         return
      endif
      r0p=r0
      sp=s+pn/2.
      IF(ia.eq.1) then
         r0p=r0-400.
         sp=s+pn
      endif
      IF(ia.eq.2) then
         r0p=r0+400
         sp=s
      endif
	  nknot=(m+1)*2
	  aknot(1)=r0p-400.
	  aknot(2)=r0p+400.
	  sumr=0
	  do i=1,m
	    k=i*2+1
		aknot(k)=ropp(i)-400.
		k=i*2+2
		aknot(k)=ropp(i)+400.
		sumr=sumr+ropp(i)
      enddo
	  rinit=(pn*r0p+sumr+400.*(2*s-m))/(pn+m)
2	  finit=objfun(pn,rinit,r0p,m,ropp,sp)

	  if(finit.gt.0.00001) then
	     za=-9999.
		 do i=1,nknot
		    if(aknot(i).lt.rinit.and.aknot(i).gt.za) za=aknot(i)
		 enddo
		 fza=objfun(pn,za,r0p,m,ropp,sp)
		 if(abs(finit-fza).lt.0.00001) then
		    rinit=za
			goto 2
		 else
		    rstar=rinit-finit*(rinit-za)/(finit-fza)
			if(rstar.lt.za) then
			   rinit=za
			   goto 2
			else
			   rinit=rstar
			   goto 2
			endif
		endif
	  endif
	  
3	  finit=objfun(pn,rinit,r0p,m,ropp,sp)
	  
	  if(finit.lt.-0.00001) then
	     zb=9999.
		 do i=1,nknot
		    if(aknot(i).gt.rinit.and.aknot(i).lt.zb) zb=aknot(i)
	     enddo
		 fzb=objfun(pn,zb,r0p,m,ropp,sp)
		 if(abs(finit-fzb).lt.0.00001)  then
		    rinit=zb
			goto 3
		 else
            rstar=rinit-finit*(zb-rinit)/(fzb-finit)
            if(rstar.gt.zb) then
               rinit=zb
               goto 3
             else
               rinit=rstar
               goto 3
             endif
         endif
      endif

      p=0
      if(abs(rinit-r0).le.400.) p=p+1
	  do i=1,m
	     if(abs(rinit-ropp(i)).le.400.) p=p+1
	  enddo
	  if(p.gt.0) then
	     r1=rinit
		 return
	  endif
      za=-9999.
	  zb=9999.
	  do i=1,nknot
	     if(aknot(i).gt.rinit.and.aknot(i).lt.zb) zb=aknot(i)
		 if(aknot(i).lt.rinit.and.aknot(i).gt.za) za=aknot(i)
	  enddo
	  if(r0.lt.za) then
	     r1=za
	  elseif(r0.gt.zb) then
	     r1=zb
	  else
	     r1=r0
	  endif
	  return
	  end

      function objfun(pn,r,r0p,m,ropp,sp)
************************************************************************
*  Function objfun                                                     *
*  Part of Ratings program                                             *
*                                                                      *
*  This function computes the objective function from the special      *
*  ratings formula.                                                    *
*     pn = N' the effective number of games                            *
*     r  = the rating of the player                                    *
*     r0p = r0' from the special ratings algorithm                     *
*     m  = the number of games the player had in the event             *
*     sp = s' from the special ratings algorithm                       *
*     ropp = array of opponent ratings                                 *
*                                                                      *
************************************************************************
      DIMENSION ropp(12)
      spwe=0.
      do i=1,m
        spwe=spwe+pwe(r,ropp(i))
      end do
      objfun=pn*pwe(r,r0p)+spwe-sp
      return
      end

      function pwe(r1,r2)
************************************************************************
*  Function pwe                                                        *
*  Part of Ratings program                                             *
*                                                                      *
*  This function computes the provisional winning expectancy and       *
*  is part of the special ratings formula.                             *
*     r1 = the player's rating                                         *
*     r2 = the oppoent's rating                                        *
*                                                                      *
************************************************************************
      rt1=r2-400
      rt2=r2+400
      IF(r1.le.rt1) then
         pwe=0.
      ELSEIF(r1.ge.rt2) then
         pwe=1.
      else
         pwe=0.5+(r1-r2)/800.
      endif
      return
      end